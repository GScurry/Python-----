13-3.对类进行定制,写一个类，用来将浮点型值转化为金额，在本练习里，我们使用美国货币，但读者也可以自选任意货币。
基本任务：编写一个dollarize（）函数，它以一个浮点型值作为输入，返回一个字符串形式的金额数。比如说：
dollarize(1234567.8901) ﹦﹥ ‘$1,234,567.89’
dollarize（）返回的金额数里应该允许有逗号（比如1,000,000）和美元的货币符号。如果有负号，它必须出现在美元符号的左边。完成这项工作后，你就可以把它转换成一个有用的类，名为MoneyFmt。
MoneyFmt类里只有一个数据值（即金额），和5个方法（你可以随意编写其他方法）。__init__()构造器对数据进行初始化，update()方法把数据值替换成一个新值，__nonzero__() 是布尔型的，当数据值非零时返回True,__repr__()方法以浮点型的形式返回金额，而__str__()方法采用和dollarize()一样的字符格式显示该值。
(a) 编写update()方法，以实现数据值的修改功能。
(b) 以你已经编写的dollarize()的代码为基础，编写__str__()方法的代码。
(c) 纠正__nonzero__()方法中的错误，这个错误以为所有小于1的数值，例如：50美分（$0.50），返回假值（False）。
(d）附加题：允许用户通过一个可选的参数指定是把负数数值显示在一对尖括号里还是显示一个负号。默认参数是使用标准的负号。

def dollarize(money):
    str_money=str(money)
    length=len(str_money)
    L=list(str_money)
    i=length-1
    count=0
    while i>=0:
        if i==0:
            if L[i]=='-':
                L.insert(i+1,'$')
                i=i-1
            else:
                L.insert(i,'$')
                i=i-1
        elif L[i]=='.':
            count=0
            i=i-1
        elif count==2:
            if L[i-1]=='.':
                count=0
            else:
                count=0
                L.insert(i, ',')
            i=i-1
        elif L[i]>='0' and L[i]<='9':
            count=count+1
            i=i-1
    result=''.join(L)
    return result
'''            
money=input('input money:   ')
print(dollarize(money))            
'''        
class MoneyFmt(object):
    def __init__(self,money):
        self.money=dollarize(money)
    def __update__(self,money):
        self.money=dollarize(money)
    def __nonzero__(self):
        if self.money!='0':
            return True
        else:
            return False
    def __repr__(self):
        return self.money
    def __str__(self):
        return str(self.money)
    
m=MoneyFmt(121423.4523)
print(m)      
        
